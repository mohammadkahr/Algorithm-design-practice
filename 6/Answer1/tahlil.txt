زمان اجرا:

    مرتب‌سازی آرایه اشیاء با استفاده از تابع arr.sort از زمانی به اندازه O(n log n) نیاز دارد.
    حلقه اصلی while در تابع knapsack_solution حداکثر n بار تکرار می‌شود. در هر بار تکرار، عملیات‌های مرتبط با جابه‌جایی اشیاء و اضافه کردن به صف انجام می‌شود که هر کدام از آن‌ها به صورت ثابت O(1) انجام می‌شود. بنابراین، زمان اجرای این بخش از کد نیز O(n) است.
    تابع bound نیز در هر بار فراخوانی به صورت ثابت O(n) اجرا می‌شود.
    با توجه به این تحلیل، زمان اجرای کل الگوریتم برابر با O(n log n + n^2) یا به صورت کلی O(n^2) است.

حافظه:

    برای نگهداری اشیاء، از آرایه arr استفاده می‌شود که به طول n است. بنابراین، مصرف حافظه این بخش از کد O(n) است.
    صف q نیز حافظه‌ای برابر با تعداد عناصر در صف دارد، که در حالت بدینه O(n) است.
    همچنین، از آرایه selected_items برای نگهداری آیتم‌های انتخاب شده استفاده می‌شود که حداکثر به طول n خواهد بود. بنابراین، مصرف حافظه این بخش نیز O(n) است.
    با توجه به موارد فوق، مصرف حافظه کل الگوریتم O(n) است.

در نتیجه، تحلیل زمانی الگوریتم برابر با O(n^2) است و مصرف حافظه آن O(n) است.